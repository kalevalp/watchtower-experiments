service: wt-collision-count

provider:
  name: aws
  runtime: nodejs12.x
#  runtime: nodejs10.x
  region: eu-west-1
  stage: test
  lambdaHashingVersion: 20201221
  environment:
    WATCHTOWER_EVENT_KINESIS_STREAM:
      Ref: EventsStream
    DEBUG_WATCHTOWER: 1    # Produces verbose debug prints
    PROFILE_WATCHTOWER: 1  # Produces timing information
#    WATCHTOWER_MBMARK_PROP_COUNT: ${env:WATCHTOWER_MBMARK_PROP_COUNT}
#    WATCHTOWER_MBMARK_ID_COUNT: ${env:WATCHTOWER_MBMARK_ID_COUNT}

  iam:
    role:
      statements:
      - Effect: Allow
        Action: '*'
        Resource: '*'
#         Action:
#           - 'kinesis:DescribeStream'
#           - 'kinesis:PutRecord'
#           - 'kinesis:PutRecords'
#         Resource: '*'
# #          Fn::GetAtt: [EventsStream, Arn]
# #      - Effect: Allow
# #        Action: sts:AssumeRole
# #        Principal:
# #          Service: lambda.amazonaws.com
#       - Effect: Allow
#         Action:
#           - 'dynamodb:BatchWriteItem'
#           - 'dynamodb:Query'
#         Resource: '*'
# #          Fn::GetAtt: [EventsTable, Arn]
#       - Effect: Allow
#         Action:
#           - 'state:StartExecution'
#         Resource: '*'
# #          ${self:resources.Outputs.WTCheckerMachine.Value}

custom:
  # handlerFilePostfix: '-wrapper'
  # handlerFilePostfix: ''
  handlerFilePostfix: ${env:WT_RUN_NO_RECORDING, '-wrapper'}

functions:
  hello:
    handler: handler${self:custom.handlerFilePostfix}.hello
    events:
      - http:
          path: microbmark
          method: post

  watchtower-ingestion: ${file(watchtower/functions.yml):watchtower-ingestion}   # Event ingestion function
  watchtower-monitor:   ${file(watchtower/functions.yml):watchtower-monitor}     # Event monitor
  wt-monitor-trigger:   ${file(watchtower/functions.yml):wt-monitor-trigger}     # A function that triggers the event monitoring step-functions state machine

stepFunctions:
  stateMachines:
    checker: ${file(watchtower/stateMachine.yml):stateMachines.checker}

resources:
  Resources:
    EventsTable:          ${file(watchtower/ddbTables.yml):Resources.EventsTable}
    CheckpointsTable:     ${file(watchtower/ddbTables.yml):Resources.CheckpointsTable}
    InvocationStream:     ${file(watchtower/kinesisStreams.yml):Resources.InvocationStream}
    EventsStream:         ${file(watchtower/kinesisStreams.yml):Resources.EventsStream}
#    EventWriterRole:      ${file(watchtower/iamRoles.yml):Resources.EventWriterRole}
#    EventReaderRole:      ${file(watchtower/iamRoles.yml):Resources.EventReaderRole}
#    StateMachineListExec: ${file(watchtower/iamRoles.yml):Resources.StateMachineListExec}
  Outputs:
    WTCheckerMachine: ${file(watchtower/outputs.yml):Outputs.WTCheckerMachine}
    WTEventsKinesisStream: ${file(watchtower/outputs.yml):Outputs.WTEventsKinesisStream}
    WTEventsKinesisStreamARN: ${file(watchtower/outputs.yml):Outputs.WTEventsKinesisStreamARN}

plugins:
  - serverless-step-functions
